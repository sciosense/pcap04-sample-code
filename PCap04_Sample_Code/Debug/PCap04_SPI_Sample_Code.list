
PCap04_SPI_Sample_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b4  080038b4  00020368  2**0
                  CONTENTS
  4 .ARM          00000000  080038b4  080038b4  00020368  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038b4  080038b4  00020368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  080038bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000368  08003c24  00020368  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08003c24  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd00  00000000  00000000  000203db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c0c  00000000  00000000  0002c0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  0002dce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000968  00000000  00000000  0002e928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cd3  00000000  00000000  0002f290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e3e7  00000000  00000000  00054f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e78b8  00000000  00000000  0006334a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003240  00000000  00000000  0014ac04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  0014de44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000368 	.word	0x20000368
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800385c 	.word	0x0800385c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000036c 	.word	0x2000036c
 80001c4:	0800385c 	.word	0x0800385c

080001c8 <Set_SSN>:
  *            @arg LOW: to clear the SSN pin
  *            @arg HIGH: to set the SSN pin
  * @retval none
  */
void Set_SSN(uint8_t level)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if(level == LOW) {
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d104      	bne.n	80001e2 <Set_SSN+0x1a>
    HAL_GPIO_WritePin(SSN_GPIO_Port, SSN_Pin, GPIO_PIN_RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	2140      	movs	r1, #64	; 0x40
 80001dc:	4807      	ldr	r0, [pc, #28]	; (80001fc <Set_SSN+0x34>)
 80001de:	f000 ff99 	bl	8001114 <HAL_GPIO_WritePin>
  }
  if(level == HIGH) {
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d105      	bne.n	80001f4 <Set_SSN+0x2c>
    HAL_GPIO_WritePin(SSN_GPIO_Port, SSN_Pin, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2140      	movs	r1, #64	; 0x40
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <Set_SSN+0x34>)
 80001ee:	f000 ff91 	bl	8001114 <HAL_GPIO_WritePin>
  }

  return;
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
}
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	48000400 	.word	0x48000400

08000200 <Write_Opcode>:
  * @brief  Write one byte Opcode.
  * @param  one_byte
  * @retval none
  */
void Write_Opcode(uint8_t one_byte)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]
  /* Timeout duration in millisecond [ms] */
  uint8_t timeout = 10;
 800020a:	230a      	movs	r3, #10
 800020c:	73fb      	strb	r3, [r7, #15]
  
  /* 1. Put SSN low - Activate */
  PUT_SSN_LOW;
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <Write_Opcode+0x30>)
 8000210:	2240      	movs	r2, #64	; 0x40
 8000212:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* 2. Transmit register address */
  HAL_SPI_Transmit(&hspi1, &one_byte, 1, timeout); 
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	1df9      	adds	r1, r7, #7
 8000218:	2201      	movs	r2, #1
 800021a:	4806      	ldr	r0, [pc, #24]	; (8000234 <Write_Opcode+0x34>)
 800021c:	f002 fc67 	bl	8002aee <HAL_SPI_Transmit>
  
  /* 3. Put SSN high - Deactivate */
  PUT_SSN_HIGH;
 8000220:	4b03      	ldr	r3, [pc, #12]	; (8000230 <Write_Opcode+0x30>)
 8000222:	2240      	movs	r2, #64	; 0x40
 8000224:	619a      	str	r2, [r3, #24]

  return;
 8000226:	bf00      	nop
}
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	48000400 	.word	0x48000400
 8000234:	200003d8 	.word	0x200003d8

08000238 <Write_Byte_Auto_Incr>:
  * @param  byte_array
  * @param  to_addr (32 bit)
  * @retval none
  */
void Write_Byte_Auto_Incr(int opcode, int address, uint8_t *byte_array, int to_addr)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b086      	sub	sp, #24
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]
 8000244:	603b      	str	r3, [r7, #0]
  /* Timeout duration in millisecond [ms] */
  uint8_t timeout = 10;
 8000246:	230a      	movs	r3, #10
 8000248:	74fb      	strb	r3, [r7, #19]
  //RD_CFG = 0x23C0
  //opcodes for memory access
  //WR = 0xA0
  //RD = 0x20

  if (opcode<0x100) {
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2bff      	cmp	r3, #255	; 0xff
 800024e:	dc0b      	bgt.n	8000268 <Write_Byte_Auto_Incr+0x30>
	  spiTX[0] = (uint8_t)opcode | (uint8_t)(address>>8);
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	b2da      	uxtb	r2, r3
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	121b      	asrs	r3, r3, #8
 8000258:	b2db      	uxtb	r3, r3
 800025a:	4313      	orrs	r3, r2
 800025c:	b2db      	uxtb	r3, r3
 800025e:	743b      	strb	r3, [r7, #16]
	  spiTX[1] = (uint8_t)(address);
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	747b      	strb	r3, [r7, #17]
 8000266:	e00a      	b.n	800027e <Write_Byte_Auto_Incr+0x46>
  } else {
	  spiTX[0] = (uint8_t)(opcode>>8);
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	121b      	asrs	r3, r3, #8
 800026c:	b2db      	uxtb	r3, r3
 800026e:	743b      	strb	r3, [r7, #16]
	  spiTX[1] = (uint8_t)(opcode) | (uint8_t)(address);
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	b2da      	uxtb	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	b2db      	uxtb	r3, r3
 8000278:	4313      	orrs	r3, r2
 800027a:	b2db      	uxtb	r3, r3
 800027c:	747b      	strb	r3, [r7, #17]
  }

  /* 1. Put SSN low - Activate */
  Set_SSN(LOW);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffa2 	bl	80001c8 <Set_SSN>

  /* 2.a Transmit register address */
  HAL_SPI_Transmit(&hspi1, spiTX, 2, timeout);
 8000284:	7cfb      	ldrb	r3, [r7, #19]
 8000286:	f107 0110 	add.w	r1, r7, #16
 800028a:	2202      	movs	r2, #2
 800028c:	480e      	ldr	r0, [pc, #56]	; (80002c8 <Write_Byte_Auto_Incr+0x90>)
 800028e:	f002 fc2e 	bl	8002aee <HAL_SPI_Transmit>
    
  /* 2.b Transmit register address incrementally */
  for (int i = address; i <= to_addr; i++) {
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	617b      	str	r3, [r7, #20]
 8000296:	e00b      	b.n	80002b0 <Write_Byte_Auto_Incr+0x78>
    HAL_SPI_Transmit(&hspi1, byte_array, 1, timeout);
 8000298:	7cfb      	ldrb	r3, [r7, #19]
 800029a:	2201      	movs	r2, #1
 800029c:	6879      	ldr	r1, [r7, #4]
 800029e:	480a      	ldr	r0, [pc, #40]	; (80002c8 <Write_Byte_Auto_Incr+0x90>)
 80002a0:	f002 fc25 	bl	8002aee <HAL_SPI_Transmit>

    byte_array++;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	3301      	adds	r3, #1
 80002a8:	607b      	str	r3, [r7, #4]
  for (int i = address; i <= to_addr; i++) {
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	3301      	adds	r3, #1
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	ddef      	ble.n	8000298 <Write_Byte_Auto_Incr+0x60>
  }
  
  /* 3. Put SSN high - Deactivate */
  Set_SSN(HIGH);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f7ff ff85 	bl	80001c8 <Set_SSN>

  return;
 80002be:	bf00      	nop
}
 80002c0:	3718      	adds	r7, #24
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200003d8 	.word	0x200003d8

080002cc <Read_Byte_Auto_Incr>:
  * @param  byte array (byte 0), "Byte0"
  * @param  to address
  * @retval none
  */
void Read_Byte_Auto_Incr(int opcode, int address, uint8_t *spiRX, int to_addr)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	60b9      	str	r1, [r7, #8]
 80002d6:	607a      	str	r2, [r7, #4]
 80002d8:	603b      	str	r3, [r7, #0]
  /* Timeout duration in millisecond [ms] */
  uint8_t timeout = 10;
 80002da:	230a      	movs	r3, #10
 80002dc:	75fb      	strb	r3, [r7, #23]
  uint8_t spiTX[2]; //max index

  uint16_t n_byte = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	82bb      	strh	r3, [r7, #20]
  n_byte = (to_addr - address) + 1;
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	1ad3      	subs	r3, r2, r3
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	3301      	adds	r3, #1
 80002f0:	82bb      	strh	r3, [r7, #20]
  //RD_CFG = 0x23C0
  //opcodes for memory access
  //WR = 0xA0
  //RD = 0x20

  if (opcode<0x100) {
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	2bff      	cmp	r3, #255	; 0xff
 80002f6:	dc0b      	bgt.n	8000310 <Read_Byte_Auto_Incr+0x44>
	  spiTX[0] = (uint8_t)(opcode) | (uint8_t)(address>>8);
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	121b      	asrs	r3, r3, #8
 8000300:	b2db      	uxtb	r3, r3
 8000302:	4313      	orrs	r3, r2
 8000304:	b2db      	uxtb	r3, r3
 8000306:	743b      	strb	r3, [r7, #16]
	  spiTX[1] = (uint8_t)(address);
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	b2db      	uxtb	r3, r3
 800030c:	747b      	strb	r3, [r7, #17]
 800030e:	e00a      	b.n	8000326 <Read_Byte_Auto_Incr+0x5a>
  } else {
	  spiTX[0] = (uint8_t)(opcode>>8);
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	121b      	asrs	r3, r3, #8
 8000314:	b2db      	uxtb	r3, r3
 8000316:	743b      	strb	r3, [r7, #16]
	  spiTX[1] = (uint8_t)(opcode) | (uint8_t)(address);
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	b2da      	uxtb	r2, r3
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	4313      	orrs	r3, r2
 8000322:	b2db      	uxtb	r3, r3
 8000324:	747b      	strb	r3, [r7, #17]
  }

  /* 1. Put SSN low - Activate */
  PUT_SSN_LOW;
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <Read_Byte_Auto_Incr+0x88>)
 8000328:	2240      	movs	r2, #64	; 0x40
 800032a:	629a      	str	r2, [r3, #40]	; 0x28

  /* 2. Transmit register address */
  HAL_SPI_Transmit(&hspi1, spiTX, 2, timeout);
 800032c:	7dfb      	ldrb	r3, [r7, #23]
 800032e:	f107 0110 	add.w	r1, r7, #16
 8000332:	2202      	movs	r2, #2
 8000334:	4808      	ldr	r0, [pc, #32]	; (8000358 <Read_Byte_Auto_Incr+0x8c>)
 8000336:	f002 fbda 	bl	8002aee <HAL_SPI_Transmit>

  /* 3. Read n bytes */
  HAL_SPI_Receive(&hspi1, spiRX, n_byte, timeout);
 800033a:	7dfb      	ldrb	r3, [r7, #23]
 800033c:	8aba      	ldrh	r2, [r7, #20]
 800033e:	6879      	ldr	r1, [r7, #4]
 8000340:	4805      	ldr	r0, [pc, #20]	; (8000358 <Read_Byte_Auto_Incr+0x8c>)
 8000342:	f002 fd49 	bl	8002dd8 <HAL_SPI_Receive>

  /* 4. Put SSN high - Deactivate */
  PUT_SSN_HIGH;
 8000346:	4b03      	ldr	r3, [pc, #12]	; (8000354 <Read_Byte_Auto_Incr+0x88>)
 8000348:	2240      	movs	r2, #64	; 0x40
 800034a:	619a      	str	r2, [r3, #24]

  return;
 800034c:	bf00      	nop
}
 800034e:	3718      	adds	r7, #24
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	48000400 	.word	0x48000400
 8000358:	200003d8 	.word	0x200003d8

0800035c <Read_Byte2>:
  * @brief  Read byte.
  * @param  opcode (byte)
  * @retval 8-bit value
  */
uint8_t Read_Byte2(uint8_t rd_opcode)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
  /* Timeout duration in millisecond [ms] */
  uint8_t timeout = 10;
 8000366:	230a      	movs	r3, #10
 8000368:	73fb      	strb	r3, [r7, #15]
  uint8_t spiTX[1];
  uint8_t spiRX[1];

  spiTX[0] = rd_opcode;
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	733b      	strb	r3, [r7, #12]

  /* 1. Put SSN low - Activate */
  Set_SSN(LOW);
 800036e:	2000      	movs	r0, #0
 8000370:	f7ff ff2a 	bl	80001c8 <Set_SSN>

  /* 2. Transmit register address */
  HAL_SPI_Transmit(&hspi1, spiTX, 1, timeout);
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	f107 010c 	add.w	r1, r7, #12
 800037a:	2201      	movs	r2, #1
 800037c:	4808      	ldr	r0, [pc, #32]	; (80003a0 <Read_Byte2+0x44>)
 800037e:	f002 fbb6 	bl	8002aee <HAL_SPI_Transmit>

  /*3. Read one bytes */
  HAL_SPI_Receive(&hspi1, spiRX, 1, timeout);
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	f107 0108 	add.w	r1, r7, #8
 8000388:	2201      	movs	r2, #1
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <Read_Byte2+0x44>)
 800038c:	f002 fd24 	bl	8002dd8 <HAL_SPI_Receive>

  /* 4. Put SSN high - Deactivate */
  Set_SSN(HIGH);
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff ff19 	bl	80001c8 <Set_SSN>

  return spiRX[0];
 8000396:	7a3b      	ldrb	r3, [r7, #8]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	200003d8 	.word	0x200003d8

080003a4 <Read_Dword_Lite>:
  * @param  opcode (byte)
  * @param  address (byte)
  * @retval 32-bit value
  */
uint32_t Read_Dword_Lite(uint8_t rd_opcode, uint8_t address)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	460a      	mov	r2, r1
 80003ae:	71fb      	strb	r3, [r7, #7]
 80003b0:	4613      	mov	r3, r2
 80003b2:	71bb      	strb	r3, [r7, #6]
  /* Definition of order, which bit is read first.
   * For example, with PICOCAP #define must be commented out */
//#define MSB2LSB

  /* Timeout duration in millisecond [ms] */
  uint8_t timeout = 10;
 80003b4:	230a      	movs	r3, #10
 80003b6:	75fb      	strb	r3, [r7, #23]
  uint8_t spiTX[1];
  uint8_t spiRX[4];
  uint32_t temp_u32 = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	613b      	str	r3, [r7, #16]

  spiTX[0] = rd_opcode | address;
 80003bc:	79fa      	ldrb	r2, [r7, #7]
 80003be:	79bb      	ldrb	r3, [r7, #6]
 80003c0:	4313      	orrs	r3, r2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	733b      	strb	r3, [r7, #12]

  /* 1. Put SSN low - Activate */
  Set_SSN(LOW);
 80003c6:	2000      	movs	r0, #0
 80003c8:	f7ff fefe 	bl	80001c8 <Set_SSN>

  /* 2. Transmit register address */
  HAL_SPI_Transmit(&hspi1, spiTX, 1, timeout);
 80003cc:	7dfb      	ldrb	r3, [r7, #23]
 80003ce:	f107 010c 	add.w	r1, r7, #12
 80003d2:	2201      	movs	r2, #1
 80003d4:	480e      	ldr	r0, [pc, #56]	; (8000410 <Read_Dword_Lite+0x6c>)
 80003d6:	f002 fb8a 	bl	8002aee <HAL_SPI_Transmit>

  /*3. Read four bytes */
  HAL_SPI_Receive(&hspi1, spiRX, 4, timeout);
 80003da:	7dfb      	ldrb	r3, [r7, #23]
 80003dc:	f107 0108 	add.w	r1, r7, #8
 80003e0:	2204      	movs	r2, #4
 80003e2:	480b      	ldr	r0, [pc, #44]	; (8000410 <Read_Dword_Lite+0x6c>)
 80003e4:	f002 fcf8 	bl	8002dd8 <HAL_SPI_Receive>

  /* 4. Put SSN high - Deactivate */
  Set_SSN(HIGH);
 80003e8:	2001      	movs	r0, #1
 80003ea:	f7ff feed 	bl	80001c8 <Set_SSN>
#ifdef MSB2LSB
  /*Concatenate of bytes (from MSB to LSB) */
  temp_u32 = (spiRX[0]<<24) + (spiRX[1]<<16) + (spiRX[2]<<8) + (spiRX[3]);
#else
  /*Concatenate of bytes (from LSB to MSB), e.g. used by PICOCAP */
  temp_u32 = (spiRX[3]<<24) + (spiRX[2]<<16) + (spiRX[1]<<8) + (spiRX[0]);
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	061a      	lsls	r2, r3, #24
 80003f2:	7abb      	ldrb	r3, [r7, #10]
 80003f4:	041b      	lsls	r3, r3, #16
 80003f6:	441a      	add	r2, r3
 80003f8:	7a7b      	ldrb	r3, [r7, #9]
 80003fa:	021b      	lsls	r3, r3, #8
 80003fc:	4413      	add	r3, r2
 80003fe:	7a3a      	ldrb	r2, [r7, #8]
 8000400:	4413      	add	r3, r2
 8000402:	613b      	str	r3, [r7, #16]
#endif

  return temp_u32;
 8000404:	693b      	ldr	r3, [r7, #16]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	200003d8 	.word	0x200003d8

08000414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000418:	f000 fb08 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041c:	f000 f87e 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000420:	f000 f94c 	bl	80006bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000424:	f000 f90c 	bl	8000640 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000428:	f000 f8ca 	bl	80005c0 <MX_I2C1_Init>
   * 0x88: Failure: there is a big/little-endian swap
   * 0xEE: Failure: during read cycle all bits are inverted
   * 0x77: Failure: inverted bits and bit/little-endian swap
   */
#ifndef IIC_EN
  My_buf[0] = Read_Byte2(TEST_READ);
 800042c:	207e      	movs	r0, #126	; 0x7e
 800042e:	f7ff ff95 	bl	800035c <Read_Byte2>
 8000432:	4603      	mov	r3, r0
 8000434:	461a      	mov	r2, r3
 8000436:	4b30      	ldr	r3, [pc, #192]	; (80004f8 <main+0xe4>)
 8000438:	701a      	strb	r2, [r3, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, dev_addr, My_buf, 1, 1);
#endif

  // POR + INIT
#ifndef IIC_EN
  Write_Opcode(POR);
 800043a:	2088      	movs	r0, #136	; 0x88
 800043c:	f7ff fee0 	bl	8000200 <Write_Opcode>
  HAL_Delay(500);
 8000440:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000444:	f000 fb6e 	bl	8000b24 <HAL_Delay>
  Write_Opcode(INIT);
 8000448:	208a      	movs	r0, #138	; 0x8a
 800044a:	f7ff fed9 	bl	8000200 <Write_Opcode>
  ret = I2C_Write_Opcode(dev_addr, POR);
  HAL_Delay(500);
  ret = I2C_Write_Opcode(dev_addr, INIT);
#endif
  // Delay after INIT
  HAL_Delay(10);
 800044e:	200a      	movs	r0, #10
 8000450:	f000 fb68 	bl	8000b24 <HAL_Delay>

  // Write firmware with additional write verification of e.g. 100 bytes
#ifndef IIC_EN
  Write_Byte_Auto_Incr(WR_MEM, 0x00, standard_fw, 548);
 8000454:	f44f 7309 	mov.w	r3, #548	; 0x224
 8000458:	4a28      	ldr	r2, [pc, #160]	; (80004fc <main+0xe8>)
 800045a:	2100      	movs	r1, #0
 800045c:	20a0      	movs	r0, #160	; 0xa0
 800045e:	f7ff feeb 	bl	8000238 <Write_Byte_Auto_Incr>
  Read_Byte_Auto_Incr(RD_MEM, 0x00, My_buf, 100);
 8000462:	2364      	movs	r3, #100	; 0x64
 8000464:	4a24      	ldr	r2, [pc, #144]	; (80004f8 <main+0xe4>)
 8000466:	2100      	movs	r1, #0
 8000468:	2020      	movs	r0, #32
 800046a:	f7ff ff2f 	bl	80002cc <Read_Byte_Auto_Incr>
  ret = I2C_Memory_Access(dev_addr, RD_MEM, 0x00, My_buf, 100);
#endif

  // Write configuration (52 Bytes) with additional write verification
#ifndef IIC_EN
  Write_Byte_Auto_Incr(WR_CONFIG, 0x00, standard_cfg_bytewise, 52);
 800046e:	2334      	movs	r3, #52	; 0x34
 8000470:	4a23      	ldr	r2, [pc, #140]	; (8000500 <main+0xec>)
 8000472:	2100      	movs	r1, #0
 8000474:	f24a 30c0 	movw	r0, #41920	; 0xa3c0
 8000478:	f7ff fede 	bl	8000238 <Write_Byte_Auto_Incr>
  Read_Byte_Auto_Incr(RD_CONFIG, 0x00, My_buf, 52);
 800047c:	2334      	movs	r3, #52	; 0x34
 800047e:	4a1e      	ldr	r2, [pc, #120]	; (80004f8 <main+0xe4>)
 8000480:	2100      	movs	r1, #0
 8000482:	f44f 500f 	mov.w	r0, #9152	; 0x23c0
 8000486:	f7ff ff21 	bl	80002cc <Read_Byte_Auto_Incr>

  Write_Opcode(INIT);
 800048a:	208a      	movs	r0, #138	; 0x8a
 800048c:	f7ff feb8 	bl	8000200 <Write_Opcode>
  ret = I2C_Write_Opcode(dev_addr, INIT);
#endif

  // Start CDC measurement
#ifndef IIC_EN
  Write_Opcode(CDC_START);
 8000490:	208c      	movs	r0, #140	; 0x8c
 8000492:	f7ff feb5 	bl	8000200 <Write_Opcode>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Read result register after INTN = 0
if (My_INTN_State==0) {
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <main+0xf0>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d10d      	bne.n	80004bc <main+0xa8>
#ifndef IIC_EN
	  MyRawRES0 = Read_Dword_Lite(0x40, 0x00);
 80004a0:	2100      	movs	r1, #0
 80004a2:	2040      	movs	r0, #64	; 0x40
 80004a4:	f7ff ff7e 	bl	80003a4 <Read_Dword_Lite>
 80004a8:	4603      	mov	r3, r0
 80004aa:	4a17      	ldr	r2, [pc, #92]	; (8000508 <main+0xf4>)
 80004ac:	6013      	str	r3, [r2, #0]
	  MyRawRES1 = Read_Dword_Lite(0x40, 0x04);
 80004ae:	2104      	movs	r1, #4
 80004b0:	2040      	movs	r0, #64	; 0x40
 80004b2:	f7ff ff77 	bl	80003a4 <Read_Dword_Lite>
 80004b6:	4603      	mov	r3, r0
 80004b8:	4a14      	ldr	r2, [pc, #80]	; (800050c <main+0xf8>)
 80004ba:	6013      	str	r3, [r2, #0]
	  MyRawRES1 = I2C_Read_Result(dev_addr, 0x40, 0x04);
#endif
}

	  //Post Processing
	  MyRatioRES0 = (float)MyRawRES0 / 134217728; // = 2^27
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <main+0xf4>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	ee07 3a90 	vmov	s15, r3
 80004c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004c8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000510 <main+0xfc>
 80004cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004d0:	4b10      	ldr	r3, [pc, #64]	; (8000514 <main+0x100>)
 80004d2:	edc3 7a00 	vstr	s15, [r3]
	  MyRatioRES1 = (float)MyRawRES1 / 134217728; // = 2^27
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <main+0xf8>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	ee07 3a90 	vmov	s15, r3
 80004de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004e2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000510 <main+0xfc>
 80004e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <main+0x104>)
 80004ec:	edc3 7a00 	vstr	s15, [r3]

	  HAL_Delay(50); // used for debugging
 80004f0:	2032      	movs	r0, #50	; 0x32
 80004f2:	f000 fb17 	bl	8000b24 <HAL_Delay>
if (My_INTN_State==0) {
 80004f6:	e7ce      	b.n	8000496 <main+0x82>
 80004f8:	20000004 	.word	0x20000004
 80004fc:	20000138 	.word	0x20000138
 8000500:	20000104 	.word	0x20000104
 8000504:	20000000 	.word	0x20000000
 8000508:	20000440 	.word	0x20000440
 800050c:	20000444 	.word	0x20000444
 8000510:	4d000000 	.word	0x4d000000
 8000514:	20000448 	.word	0x20000448
 8000518:	2000044c 	.word	0x2000044c

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	; 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f003 f96a 	bl	8003804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000542:	f000 ff57 	bl	80013f4 <HAL_PWREx_ControlVoltageScaling>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054c:	f000 f936 	bl	80007bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000558:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	2310      	movs	r3, #16
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800056a:	230a      	movs	r3, #10
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056e:	2307      	movs	r3, #7
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4618      	mov	r0, r3
 8000580:	f000 ff8e 	bl	80014a0 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800058a:	f000 f917 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2303      	movs	r3, #3
 8000594:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	2104      	movs	r1, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fb56 	bl	8001c58 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b2:	f000 f903 	bl	80007bc <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3758      	adds	r7, #88	; 0x58
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <MX_I2C1_Init+0x74>)
 80005c6:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <MX_I2C1_Init+0x78>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_I2C1_Init+0x74>)
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <MX_I2C1_Init+0x7c>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_I2C1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_I2C1_Init+0x74>)
 80005d8:	2201      	movs	r2, #1
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_I2C1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_I2C1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fa:	480e      	ldr	r0, [pc, #56]	; (8000634 <MX_I2C1_Init+0x74>)
 80005fc:	f000 fdba 	bl	8001174 <HAL_I2C_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000606:	f000 f8d9 	bl	80007bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800060a:	2100      	movs	r1, #0
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <MX_I2C1_Init+0x74>)
 800060e:	f000 fe4c 	bl	80012aa <HAL_I2CEx_ConfigAnalogFilter>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000618:	f000 f8d0 	bl	80007bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800061c:	2100      	movs	r1, #0
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_I2C1_Init+0x74>)
 8000620:	f000 fe8e 	bl	8001340 <HAL_I2CEx_ConfigDigitalFilter>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f8c7 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000384 	.word	0x20000384
 8000638:	40005400 	.word	0x40005400
 800063c:	10909cec 	.word	0x10909cec

08000640 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <MX_SPI1_Init+0x78>)
 8000648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_SPI1_Init+0x74>)
 800064c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_SPI1_Init+0x74>)
 800065a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800065e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000668:	2201      	movs	r2, #1
 800066a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_SPI1_Init+0x74>)
 800066e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000672:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000676:	2220      	movs	r2, #32
 8000678:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_SPI1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_SPI1_Init+0x74>)
 800068e:	2207      	movs	r2, #7
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_SPI1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_SPI1_Init+0x74>)
 80006a0:	f002 f982 	bl	80029a8 <HAL_SPI_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f000 f887 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200003d8 	.word	0x200003d8
 80006b8:	40013000 	.word	0x40013000

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <MX_GPIO_Init+0xa4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a22      	ldr	r2, [pc, #136]	; (8000760 <MX_GPIO_Init+0xa4>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <MX_GPIO_Init+0xa4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_GPIO_Init+0xa4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <MX_GPIO_Init+0xa4>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_GPIO_Init+0xa4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSN_GPIO_Port, SSN_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	4817      	ldr	r0, [pc, #92]	; (8000764 <MX_GPIO_Init+0xa8>)
 8000708:	f000 fd04 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTN_Pin */
  GPIO_InitStruct.Pin = INTN_Pin;
 800070c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000712:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INTN_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000726:	f000 fb33 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SSN_Pin */
  GPIO_InitStruct.Pin = SSN_Pin;
 800072a:	2340      	movs	r3, #64	; 0x40
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000732:	2301      	movs	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000736:	2302      	movs	r3, #2
 8000738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSN_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4619      	mov	r1, r3
 8000740:	4808      	ldr	r0, [pc, #32]	; (8000764 <MX_GPIO_Init+0xa8>)
 8000742:	f000 fb25 	bl	8000d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2017      	movs	r0, #23
 800074c:	f000 fae9 	bl	8000d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000750:	2017      	movs	r0, #23
 8000752:	f000 fb02 	bl	8000d5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000756:	bf00      	nop
 8000758:	3720      	adds	r7, #32
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
 8000764:	48000400 	.word	0x48000400

08000768 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);

	// Note: It takes about 1us after INTN

	if (GPIO_Pin == INTN_Pin) {
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000778:	d118      	bne.n	80007ac <HAL_GPIO_EXTI_Callback+0x44>
		My_INTN_State = (HAL_GPIO_ReadPin(INTN_GPIO_Port, INTN_Pin) == GPIO_PIN_SET); /* low active */
 800077a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f000 fcaf 	bl	80010e4 <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	bf0c      	ite	eq
 800078c:	2301      	moveq	r3, #1
 800078e:	2300      	movne	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000796:	701a      	strb	r2, [r3, #0]
		if (My_INTN_State == 0) {
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_GPIO_EXTI_Callback+0x4c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d104      	bne.n	80007ac <HAL_GPIO_EXTI_Callback+0x44>
			My_INTN_Counter += 1;
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_GPIO_EXTI_Callback+0x50>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <HAL_GPIO_EXTI_Callback+0x50>)
 80007aa:	6013      	str	r3, [r2, #0]
		}
	}

}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000000 	.word	0x20000000
 80007b8:	2000043c 	.word	0x2000043c

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_MspInit+0x44>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	; 0x60
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_MspInit+0x44>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_MspInit+0x44>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	; 0x58
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_MspInit+0x44>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0ac      	sub	sp, #176	; 0xb0
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2288      	movs	r2, #136	; 0x88
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f002 ffe7 	bl	8003804 <memset>
  if(hi2c->Instance==I2C1)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <HAL_I2C_MspInit+0xb0>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d13b      	bne.n	80008b8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000844:	2300      	movs	r3, #0
 8000846:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fbef 	bl	8002030 <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000858:	f7ff ffb0 	bl	80007bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <HAL_I2C_MspInit+0xb4>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000860:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <HAL_I2C_MspInit+0xb4>)
 8000862:	f043 0302 	orr.w	r3, r3, #2
 8000866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <HAL_I2C_MspInit+0xb4>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086c:	f003 0302 	and.w	r3, r3, #2
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000874:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087c:	2312      	movs	r3, #18
 800087e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000882:	2301      	movs	r3, #1
 8000884:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800088e:	2304      	movs	r3, #4
 8000890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000898:	4619      	mov	r1, r3
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <HAL_I2C_MspInit+0xb8>)
 800089c:	f000 fa78 	bl	8000d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_I2C_MspInit+0xb4>)
 80008a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_I2C_MspInit+0xb4>)
 80008a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008aa:	6593      	str	r3, [r2, #88]	; 0x58
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_I2C_MspInit+0xb4>)
 80008ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008b8:	bf00      	nop
 80008ba:	37b0      	adds	r7, #176	; 0xb0
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40005400 	.word	0x40005400
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000400 	.word	0x48000400

080008cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a17      	ldr	r2, [pc, #92]	; (8000948 <HAL_SPI_MspInit+0x7c>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d128      	bne.n	8000940 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <HAL_SPI_MspInit+0x80>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	4a16      	ldr	r2, [pc, #88]	; (800094c <HAL_SPI_MspInit+0x80>)
 80008f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008f8:	6613      	str	r3, [r2, #96]	; 0x60
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_SPI_MspInit+0x80>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_SPI_MspInit+0x80>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <HAL_SPI_MspInit+0x80>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_SPI_MspInit+0x80>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 800091e:	23e0      	movs	r3, #224	; 0xe0
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800092e:	2305      	movs	r3, #5
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093c:	f000 fa28 	bl	8000d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40013000 	.word	0x40013000
 800094c:	40021000 	.word	0x40021000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f8a2 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTN_Pin);
 80009a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009ac:	f000 fbca 	bl	8001144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <SystemInit+0x20>)
 80009ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <SystemInit+0x20>)
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009dc:	f7ff ffea 	bl	80009b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e2:	490d      	ldr	r1, [pc, #52]	; (8000a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <LoopForever+0xe>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f8:	4c0a      	ldr	r4, [pc, #40]	; (8000a24 <LoopForever+0x16>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a06:	f002 ff05 	bl	8003814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a0a:	f7ff fd03 	bl	8000414 <main>

08000a0e <LoopForever>:

LoopForever:
    b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8000a1c:	080038bc 	.word	0x080038bc
  ldr r2, =_sbss
 8000a20:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8000a24:	20000454 	.word	0x20000454

08000a28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC1_2_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_Init+0x3c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <HAL_Init+0x3c>)
 8000a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a42:	2003      	movs	r0, #3
 8000a44:	f000 f962 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 f80f 	bl	8000a6c <HAL_InitTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	e001      	b.n	8000a5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a5a:	f7ff feb5 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_InitTick+0x6c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_InitTick+0x70>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_InitTick+0x6c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f96d 	bl	8000d76 <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10f      	bne.n	8000ac2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d809      	bhi.n	8000abc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 f937 	bl	8000d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_InitTick+0x74>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e007      	b.n	8000acc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e004      	b.n	8000acc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
 8000ac6:	e001      	b.n	8000acc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000364 	.word	0x20000364
 8000adc:	2000035c 	.word	0x2000035c
 8000ae0:	20000360 	.word	0x20000360

08000ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x20>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x24>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <HAL_IncTick+0x24>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000364 	.word	0x20000364
 8000b08:	20000450 	.word	0x20000450

08000b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <HAL_GetTick+0x14>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000450 	.word	0x20000450

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff ffee 	bl	8000b0c <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_Delay+0x44>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4a:	bf00      	nop
 8000b4c:	f7ff ffde 	bl	8000b0c <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d8f7      	bhi.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000364 	.word	0x20000364

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff29 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff3e 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff8e 	bl	8000c60 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5d 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff31 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffa2 	bl	8000cc8 <SysTick_Config>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9e:	e17f      	b.n	80010a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	2101      	movs	r1, #1
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 8171 	beq.w	800109a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d005      	beq.n	8000dd0 <HAL_GPIO_Init+0x40>
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d130      	bne.n	8000e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e06:	2201      	movs	r2, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	f003 0201 	and.w	r2, r3, #1
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d118      	bne.n	8000e70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e44:	2201      	movs	r2, #1
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	f003 0201 	and.w	r2, r3, #1
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d017      	beq.n	8000eac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d123      	bne.n	8000f00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	6939      	ldr	r1, [r7, #16]
 8000efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0203 	and.w	r2, r3, #3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 80ac 	beq.w	800109a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b5f      	ldr	r3, [pc, #380]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	4a5e      	ldr	r2, [pc, #376]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4e:	4b5c      	ldr	r3, [pc, #368]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f5a:	4a5a      	ldr	r2, [pc, #360]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f84:	d025      	beq.n	8000fd2 <HAL_GPIO_Init+0x242>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4f      	ldr	r2, [pc, #316]	; (80010c8 <HAL_GPIO_Init+0x338>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01f      	beq.n	8000fce <HAL_GPIO_Init+0x23e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4e      	ldr	r2, [pc, #312]	; (80010cc <HAL_GPIO_Init+0x33c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0x23a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4d      	ldr	r2, [pc, #308]	; (80010d0 <HAL_GPIO_Init+0x340>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0x236>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_GPIO_Init+0x344>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_GPIO_Init+0x232>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4b      	ldr	r2, [pc, #300]	; (80010d8 <HAL_GPIO_Init+0x348>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x22e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4a      	ldr	r2, [pc, #296]	; (80010dc <HAL_GPIO_Init+0x34c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_GPIO_Init+0x22a>
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	e00c      	b.n	8000fd4 <HAL_GPIO_Init+0x244>
 8000fba:	2307      	movs	r3, #7
 8000fbc:	e00a      	b.n	8000fd4 <HAL_GPIO_Init+0x244>
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	e008      	b.n	8000fd4 <HAL_GPIO_Init+0x244>
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x244>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e004      	b.n	8000fd4 <HAL_GPIO_Init+0x244>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e002      	b.n	8000fd4 <HAL_GPIO_Init+0x244>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x244>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	f002 0203 	and.w	r2, r2, #3
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	4093      	lsls	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fe4:	4937      	ldr	r1, [pc, #220]	; (80010c4 <HAL_GPIO_Init+0x334>)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <HAL_GPIO_Init+0x350>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001016:	4a32      	ldr	r2, [pc, #200]	; (80010e0 <HAL_GPIO_Init+0x350>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800101c:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <HAL_GPIO_Init+0x350>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001040:	4a27      	ldr	r2, [pc, #156]	; (80010e0 <HAL_GPIO_Init+0x350>)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_GPIO_Init+0x350>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800106a:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <HAL_GPIO_Init+0x350>)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <HAL_GPIO_Init+0x350>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001094:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <HAL_GPIO_Init+0x350>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa22 f303 	lsr.w	r3, r2, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f47f ae78 	bne.w	8000da0 <HAL_GPIO_Init+0x10>
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010000 	.word	0x40010000
 80010c8:	48000400 	.word	0x48000400
 80010cc:	48000800 	.word	0x48000800
 80010d0:	48000c00 	.word	0x48000c00
 80010d4:	48001000 	.word	0x48001000
 80010d8:	48001400 	.word	0x48001400
 80010dc:	48001800 	.word	0x48001800
 80010e0:	40010400 	.word	0x40010400

080010e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e001      	b.n	8001106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001124:	787b      	ldrb	r3, [r7, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001130:	e002      	b.n	8001138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001150:	695a      	ldr	r2, [r3, #20]
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fb00 	bl	8000768 <HAL_GPIO_EXTI_Callback>
  }
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e08d      	b.n	80012a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d106      	bne.n	80011a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fb38 	bl	8000810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2224      	movs	r2, #36	; 0x24
 80011a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d107      	bne.n	80011ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	e006      	b.n	80011fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d108      	bne.n	8001216 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	e007      	b.n	8001226 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001224:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001238:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001248:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69d9      	ldr	r1, [r3, #28]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1a      	ldr	r2, [r3, #32]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0201 	orr.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2220      	movs	r2, #32
 800128e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b20      	cmp	r3, #32
 80012be:	d138      	bne.n	8001332 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e032      	b.n	8001334 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2224      	movs	r2, #36	; 0x24
 80012da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6819      	ldr	r1, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0201 	orr.w	r2, r2, #1
 800131c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2220      	movs	r2, #32
 8001322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001332:	2302      	movs	r3, #2
  }
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b20      	cmp	r3, #32
 8001354:	d139      	bne.n	80013ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001360:	2302      	movs	r3, #2
 8001362:	e033      	b.n	80013cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2224      	movs	r2, #36	; 0x24
 8001370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0201 	bic.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001392:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0201 	orr.w	r2, r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2220      	movs	r2, #32
 80013ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80013ca:	2302      	movs	r3, #2
  }
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40007000 	.word	0x40007000

080013f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001402:	d130      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001404:	4b23      	ldr	r3, [pc, #140]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800140c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001410:	d038      	beq.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800141a:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001420:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2232      	movs	r2, #50	; 0x32
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0c9b      	lsrs	r3, r3, #18
 8001434:	3301      	adds	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001438:	e002      	b.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3b01      	subs	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144c:	d102      	bne.n	8001454 <HAL_PWREx_ControlVoltageScaling+0x60>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f2      	bne.n	800143a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001460:	d110      	bne.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e00f      	b.n	8001486 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800146e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001472:	d007      	beq.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800147c:	4a05      	ldr	r2, [pc, #20]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001482:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40007000 	.word	0x40007000
 8001498:	2000035c 	.word	0x2000035c
 800149c:	431bde83 	.word	0x431bde83

080014a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e3ca      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b2:	4b97      	ldr	r3, [pc, #604]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014bc:	4b94      	ldr	r3, [pc, #592]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80e4 	beq.w	800169c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <HAL_RCC_OscConfig+0x4a>
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2b0c      	cmp	r3, #12
 80014de:	f040 808b 	bne.w	80015f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	f040 8087 	bne.w	80015f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ea:	4b89      	ldr	r3, [pc, #548]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x62>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e3a2      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1a      	ldr	r2, [r3, #32]
 8001506:	4b82      	ldr	r3, [pc, #520]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d004      	beq.n	800151c <HAL_RCC_OscConfig+0x7c>
 8001512:	4b7f      	ldr	r3, [pc, #508]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800151a:	e005      	b.n	8001528 <HAL_RCC_OscConfig+0x88>
 800151c:	4b7c      	ldr	r3, [pc, #496]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800151e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001528:	4293      	cmp	r3, r2
 800152a:	d223      	bcs.n	8001574 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fd1d 	bl	8001f70 <RCC_SetFlashLatencyFromMSIRange>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e383      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001540:	4b73      	ldr	r3, [pc, #460]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a72      	ldr	r2, [pc, #456]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001546:	f043 0308 	orr.w	r3, r3, #8
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b70      	ldr	r3, [pc, #448]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	496d      	ldr	r1, [pc, #436]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155e:	4b6c      	ldr	r3, [pc, #432]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	4968      	ldr	r1, [pc, #416]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
 8001572:	e025      	b.n	80015c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001574:	4b66      	ldr	r3, [pc, #408]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a65      	ldr	r2, [pc, #404]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4960      	ldr	r1, [pc, #384]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001592:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	495b      	ldr	r1, [pc, #364]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d109      	bne.n	80015c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 fcdd 	bl	8001f70 <RCC_SetFlashLatencyFromMSIRange>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e343      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015c0:	f000 fc4a 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b52      	ldr	r3, [pc, #328]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	4950      	ldr	r1, [pc, #320]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80015d2:	5ccb      	ldrb	r3, [r1, r3]
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
 80015dc:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_RCC_OscConfig+0x278>)
 80015de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015e0:	4b4e      	ldr	r3, [pc, #312]	; (800171c <HAL_RCC_OscConfig+0x27c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fa41 	bl	8000a6c <HAL_InitTick>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d052      	beq.n	800169a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	e327      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d032      	beq.n	8001666 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001600:	4b43      	ldr	r3, [pc, #268]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a42      	ldr	r2, [pc, #264]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800160c:	f7ff fa7e 	bl	8000b0c <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001614:	f7ff fa7a 	bl	8000b0c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e310      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001626:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a36      	ldr	r2, [pc, #216]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001638:	f043 0308 	orr.w	r3, r3, #8
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b34      	ldr	r3, [pc, #208]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4931      	ldr	r1, [pc, #196]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001650:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	492c      	ldr	r1, [pc, #176]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
 8001664:	e01a      	b.n	800169c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a29      	ldr	r2, [pc, #164]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001672:	f7ff fa4b 	bl	8000b0c <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800167a:	f7ff fa47 	bl	8000b0c <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e2dd      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x1da>
 8001698:	e000      	b.n	800169c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800169a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d074      	beq.n	8001792 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d005      	beq.n	80016ba <HAL_RCC_OscConfig+0x21a>
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b0c      	cmp	r3, #12
 80016b2:	d10e      	bne.n	80016d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d10b      	bne.n	80016d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d064      	beq.n	8001790 <HAL_RCC_OscConfig+0x2f0>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d160      	bne.n	8001790 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e2ba      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x24a>
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e026      	b.n	8001738 <HAL_RCC_OscConfig+0x298>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f2:	d115      	bne.n	8001720 <HAL_RCC_OscConfig+0x280>
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a05      	ldr	r2, [pc, #20]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80016fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a02      	ldr	r2, [pc, #8]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e014      	b.n	8001738 <HAL_RCC_OscConfig+0x298>
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	08003874 	.word	0x08003874
 8001718:	2000035c 	.word	0x2000035c
 800171c:	20000360 	.word	0x20000360
 8001720:	4ba0      	ldr	r3, [pc, #640]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a9f      	ldr	r2, [pc, #636]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b9d      	ldr	r3, [pc, #628]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a9c      	ldr	r2, [pc, #624]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d013      	beq.n	8001768 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff f9e4 	bl	8000b0c <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff f9e0 	bl	8000b0c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e276      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175a:	4b92      	ldr	r3, [pc, #584]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x2a8>
 8001766:	e014      	b.n	8001792 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff f9d0 	bl	8000b0c <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff f9cc 	bl	8000b0c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e262      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001782:	4b88      	ldr	r3, [pc, #544]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x2d0>
 800178e:	e000      	b.n	8001792 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d060      	beq.n	8001860 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_OscConfig+0x310>
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2b0c      	cmp	r3, #12
 80017a8:	d119      	bne.n	80017de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d116      	bne.n	80017de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b0:	4b7c      	ldr	r3, [pc, #496]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_OscConfig+0x328>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e23f      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c8:	4b76      	ldr	r3, [pc, #472]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	061b      	lsls	r3, r3, #24
 80017d6:	4973      	ldr	r1, [pc, #460]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017dc:	e040      	b.n	8001860 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d023      	beq.n	800182e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e6:	4b6f      	ldr	r3, [pc, #444]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6e      	ldr	r2, [pc, #440]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80017ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff f98b 	bl	8000b0c <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fa:	f7ff f987 	bl	8000b0c <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e21d      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180c:	4b65      	ldr	r3, [pc, #404]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001818:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	495f      	ldr	r1, [pc, #380]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
 800182c:	e018      	b.n	8001860 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182e:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a5c      	ldr	r2, [pc, #368]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff f967 	bl	8000b0c <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff f963 	bl	8000b0c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1f9      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d03c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01c      	beq.n	80018ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187a:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff f942 	bl	8000b0c <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188c:	f7ff f93e 	bl	8000b0c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e1d4      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80018a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ef      	beq.n	800188c <HAL_RCC_OscConfig+0x3ec>
 80018ac:	e01b      	b.n	80018e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ae:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80018b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b4:	4a3b      	ldr	r2, [pc, #236]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff f925 	bl	8000b0c <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff f921 	bl	8000b0c <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1b7      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80018da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1ef      	bne.n	80018c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80a6 	beq.w	8001a40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f4:	2300      	movs	r3, #0
 80018f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10d      	bne.n	8001920 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190e:	6593      	str	r3, [r2, #88]	; 0x58
 8001910:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191c:	2301      	movs	r3, #1
 800191e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001920:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_RCC_OscConfig+0x508>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d118      	bne.n	800195e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_RCC_OscConfig+0x508>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_RCC_OscConfig+0x508>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001938:	f7ff f8e8 	bl	8000b0c <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001940:	f7ff f8e4 	bl	8000b0c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e17a      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_RCC_OscConfig+0x508>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d108      	bne.n	8001978 <HAL_RCC_OscConfig+0x4d8>
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001976:	e029      	b.n	80019cc <HAL_RCC_OscConfig+0x52c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d115      	bne.n	80019ac <HAL_RCC_OscConfig+0x50c>
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001996:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a0:	e014      	b.n	80019cc <HAL_RCC_OscConfig+0x52c>
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40007000 	.word	0x40007000
 80019ac:	4b9c      	ldr	r3, [pc, #624]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b2:	4a9b      	ldr	r2, [pc, #620]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019bc:	4b98      	ldr	r3, [pc, #608]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c2:	4a97      	ldr	r2, [pc, #604]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d016      	beq.n	8001a02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff f89a 	bl	8000b0c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff f896 	bl	8000b0c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e12a      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f2:	4b8b      	ldr	r3, [pc, #556]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 80019f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0ed      	beq.n	80019dc <HAL_RCC_OscConfig+0x53c>
 8001a00:	e015      	b.n	8001a2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff f883 	bl	8000b0c <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7ff f87f 	bl	8000b0c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e113      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a20:	4b7f      	ldr	r3, [pc, #508]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ed      	bne.n	8001a0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a2e:	7ffb      	ldrb	r3, [r7, #31]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d105      	bne.n	8001a40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a34:	4b7a      	ldr	r3, [pc, #488]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	4a79      	ldr	r2, [pc, #484]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80fe 	beq.w	8001c46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	f040 80d0 	bne.w	8001bf4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a54:	4b72      	ldr	r3, [pc, #456]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0203 	and.w	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d130      	bne.n	8001aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	3b01      	subs	r3, #1
 8001a74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d127      	bne.n	8001aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d11f      	bne.n	8001aca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a94:	2a07      	cmp	r2, #7
 8001a96:	bf14      	ite	ne
 8001a98:	2201      	movne	r2, #1
 8001a9a:	2200      	moveq	r2, #0
 8001a9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d113      	bne.n	8001aca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aac:	085b      	lsrs	r3, r3, #1
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d109      	bne.n	8001aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d06e      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b0c      	cmp	r3, #12
 8001ace:	d069      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ad0:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001adc:	4b50      	ldr	r3, [pc, #320]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0ad      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001aec:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a4b      	ldr	r2, [pc, #300]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001af6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001af8:	f7ff f808 	bl	8000b0c <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f804 	bl	8000b0c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e09a      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b12:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1e:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b2e:	3a01      	subs	r2, #1
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	4311      	orrs	r1, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b38:	0212      	lsls	r2, r2, #8
 8001b3a:	4311      	orrs	r1, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b40:	0852      	lsrs	r2, r2, #1
 8001b42:	3a01      	subs	r2, #1
 8001b44:	0552      	lsls	r2, r2, #21
 8001b46:	4311      	orrs	r1, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b4c:	0852      	lsrs	r2, r2, #1
 8001b4e:	3a01      	subs	r2, #1
 8001b50:	0652      	lsls	r2, r2, #25
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b58:	0912      	lsrs	r2, r2, #4
 8001b5a:	0452      	lsls	r2, r2, #17
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	4930      	ldr	r1, [pc, #192]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a2d      	ldr	r2, [pc, #180]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b70:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4a2a      	ldr	r2, [pc, #168]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b7c:	f7fe ffc6 	bl	8000b0c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7fe ffc2 	bl	8000b0c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e058      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba2:	e050      	b.n	8001c46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e04f      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d148      	bne.n	8001c46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bcc:	f7fe ff9e 	bl	8000b0c <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7fe ff9a 	bl	8000b0c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e030      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x734>
 8001bf2:	e028      	b.n	8001c46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d023      	beq.n	8001c42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_RCC_OscConfig+0x780>)
 8001c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7fe ff81 	bl	8000b0c <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c0c:	e00c      	b.n	8001c28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7fe ff7d 	bl	8000b0c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d905      	bls.n	8001c28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e013      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
 8001c20:	40021000 	.word	0x40021000
 8001c24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_OscConfig+0x7b0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ec      	bne.n	8001c0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_OscConfig+0x7b0>)
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	4905      	ldr	r1, [pc, #20]	; (8001c50 <HAL_RCC_OscConfig+0x7b0>)
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_OscConfig+0x7b4>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60cb      	str	r3, [r1, #12]
 8001c40:	e001      	b.n	8001c46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000
 8001c54:	feeefffc 	.word	0xfeeefffc

08001c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0e7      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b75      	ldr	r3, [pc, #468]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d910      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 0207 	bic.w	r2, r3, #7
 8001c82:	4970      	ldr	r1, [pc, #448]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b6e      	ldr	r3, [pc, #440]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0cf      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d010      	beq.n	8001cca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	4b66      	ldr	r3, [pc, #408]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d908      	bls.n	8001cca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb8:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4960      	ldr	r1, [pc, #384]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d04c      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d121      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0a6      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf6:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d115      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e09a      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d0e:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e08e      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e086      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d2e:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f023 0203 	bic.w	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4943      	ldr	r1, [pc, #268]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d40:	f7fe fee4 	bl	8000b0c <HAL_GetTick>
 8001d44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d48:	f7fe fee0 	bl	8000b0c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e06e      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 020c 	and.w	r2, r3, #12
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d1eb      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d208      	bcs.n	8001d9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	492b      	ldr	r1, [pc, #172]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9e:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d210      	bcs.n	8001dce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 0207 	bic.w	r2, r3, #7
 8001db4:	4923      	ldr	r1, [pc, #140]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbc:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e036      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4918      	ldr	r1, [pc, #96]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d009      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4910      	ldr	r1, [pc, #64]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e0c:	f000 f824 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	490b      	ldr	r1, [pc, #44]	; (8001e4c <HAL_RCC_ClockConfig+0x1f4>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
 8001e28:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1fc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fe1b 	bl	8000a6c <HAL_InitTick>
 8001e36:	4603      	mov	r3, r0
 8001e38:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	08003874 	.word	0x08003874
 8001e50:	2000035c 	.word	0x2000035c
 8001e54:	20000360 	.word	0x20000360

08001e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e66:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e70:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x34>
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	d121      	bne.n	8001eca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d11e      	bne.n	8001eca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	e005      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001eb4:	4a2b      	ldr	r2, [pc, #172]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10d      	bne.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	e004      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001edc:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ede:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d134      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d003      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0xa6>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d003      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0xac>
 8001efc:	e005      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f00:	617b      	str	r3, [r7, #20]
      break;
 8001f02:	e005      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f06:	617b      	str	r3, [r7, #20]
      break;
 8001f08:	e002      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	617b      	str	r3, [r7, #20]
      break;
 8001f0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	fb03 f202 	mul.w	r2, r3, r2
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	0e5b      	lsrs	r3, r3, #25
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	3301      	adds	r3, #1
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f50:	69bb      	ldr	r3, [r7, #24]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08003884 	.word	0x08003884
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	007a1200 	.word	0x007a1200

08001f70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f7c:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f88:	f7ff fa26 	bl	80013d8 <HAL_PWREx_GetVoltageRange>
 8001f8c:	6178      	str	r0, [r7, #20]
 8001f8e:	e014      	b.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	4a24      	ldr	r2, [pc, #144]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9c:	4b22      	ldr	r3, [pc, #136]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fa8:	f7ff fa16 	bl	80013d8 <HAL_PWREx_GetVoltageRange>
 8001fac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc0:	d10b      	bne.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b80      	cmp	r3, #128	; 0x80
 8001fc6:	d919      	bls.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2ba0      	cmp	r3, #160	; 0xa0
 8001fcc:	d902      	bls.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fce:	2302      	movs	r3, #2
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	e013      	b.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e010      	b.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b80      	cmp	r3, #128	; 0x80
 8001fde:	d902      	bls.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	e00a      	b.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b80      	cmp	r3, #128	; 0x80
 8001fea:	d102      	bne.n	8001ff2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fec:	2302      	movs	r3, #2
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	e004      	b.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b70      	cmp	r3, #112	; 0x70
 8001ff6:	d101      	bne.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 0207 	bic.w	r2, r3, #7
 8002004:	4909      	ldr	r1, [pc, #36]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	429a      	cmp	r2, r3
 8002018:	d001      	beq.n	800201e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	40022000 	.word	0x40022000

08002030 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002038:	2300      	movs	r3, #0
 800203a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800203c:	2300      	movs	r3, #0
 800203e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002048:	2b00      	cmp	r3, #0
 800204a:	d041      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002050:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002054:	d02a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002056:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800205a:	d824      	bhi.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800205c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002060:	d008      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002062:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002066:	d81e      	bhi.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800206c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002070:	d010      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002072:	e018      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002074:	4b86      	ldr	r3, [pc, #536]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4a85      	ldr	r2, [pc, #532]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002080:	e015      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3304      	adds	r3, #4
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fabb 	bl	8002604 <RCCEx_PLLSAI1_Config>
 800208e:	4603      	mov	r3, r0
 8002090:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002092:	e00c      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3320      	adds	r3, #32
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fba6 	bl	80027ec <RCCEx_PLLSAI2_Config>
 80020a0:	4603      	mov	r3, r0
 80020a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020a4:	e003      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	74fb      	strb	r3, [r7, #19]
      break;
 80020aa:	e000      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10b      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020b4:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c2:	4973      	ldr	r1, [pc, #460]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ca:	e001      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d041      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020e4:	d02a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020ea:	d824      	bhi.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020f0:	d008      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020f6:	d81e      	bhi.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002100:	d010      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002102:	e018      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002104:	4b62      	ldr	r3, [pc, #392]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a61      	ldr	r2, [pc, #388]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002110:	e015      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3304      	adds	r3, #4
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fa73 	bl	8002604 <RCCEx_PLLSAI1_Config>
 800211e:	4603      	mov	r3, r0
 8002120:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002122:	e00c      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3320      	adds	r3, #32
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fb5e 	bl	80027ec <RCCEx_PLLSAI2_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002134:	e003      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	74fb      	strb	r3, [r7, #19]
      break;
 800213a:	e000      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800213c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10b      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002144:	4b52      	ldr	r3, [pc, #328]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002152:	494f      	ldr	r1, [pc, #316]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800215a:	e001      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80a0 	beq.w	80022ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00d      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002188:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	4a40      	ldr	r2, [pc, #256]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	6593      	str	r3, [r2, #88]	; 0x58
 8002194:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a4:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a3a      	ldr	r2, [pc, #232]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b0:	f7fe fcac 	bl	8000b0c <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021b6:	e009      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe fca8 	bl	8000b0c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d902      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	74fb      	strb	r3, [r7, #19]
        break;
 80021ca:	e005      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021cc:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ef      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d15c      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021de:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01f      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d019      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002206:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220e:	4a20      	ldr	r2, [pc, #128]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221e:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d016      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7fe fc67 	bl	8000b0c <HAL_GetTick>
 800223e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002240:	e00b      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7fe fc63 	bl	8000b0c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d902      	bls.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	74fb      	strb	r3, [r7, #19]
            break;
 8002258:	e006      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ec      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10c      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227e:	4904      	ldr	r1, [pc, #16]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002286:	e009      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
 800228c:	e006      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800229c:	7c7b      	ldrb	r3, [r7, #17]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a2:	4b9e      	ldr	r3, [pc, #632]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	4a9d      	ldr	r2, [pc, #628]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ba:	4b98      	ldr	r3, [pc, #608]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f023 0203 	bic.w	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	4994      	ldr	r1, [pc, #592]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022dc:	4b8f      	ldr	r3, [pc, #572]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f023 020c 	bic.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	498c      	ldr	r1, [pc, #560]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022fe:	4b87      	ldr	r3, [pc, #540]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	4983      	ldr	r1, [pc, #524]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002320:	4b7e      	ldr	r3, [pc, #504]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	497b      	ldr	r1, [pc, #492]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002342:	4b76      	ldr	r3, [pc, #472]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002350:	4972      	ldr	r1, [pc, #456]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002364:	4b6d      	ldr	r3, [pc, #436]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	496a      	ldr	r1, [pc, #424]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002394:	4961      	ldr	r1, [pc, #388]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023a8:	4b5c      	ldr	r3, [pc, #368]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b6:	4959      	ldr	r1, [pc, #356]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ca:	4b54      	ldr	r3, [pc, #336]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d8:	4950      	ldr	r1, [pc, #320]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023ec:	4b4b      	ldr	r3, [pc, #300]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	4948      	ldr	r1, [pc, #288]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800240e:	4b43      	ldr	r3, [pc, #268]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002414:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241c:	493f      	ldr	r1, [pc, #252]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d028      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002430:	4b3a      	ldr	r3, [pc, #232]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243e:	4937      	ldr	r1, [pc, #220]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800244a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800244e:	d106      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002450:	4b32      	ldr	r3, [pc, #200]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a31      	ldr	r2, [pc, #196]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800245a:	60d3      	str	r3, [r2, #12]
 800245c:	e011      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002462:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002466:	d10c      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3304      	adds	r3, #4
 800246c:	2101      	movs	r1, #1
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f8c8 	bl	8002604 <RCCEx_PLLSAI1_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800247e:	7cfb      	ldrb	r3, [r7, #19]
 8002480:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d028      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800248e:	4b23      	ldr	r3, [pc, #140]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002494:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	491f      	ldr	r1, [pc, #124]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ac:	d106      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ae:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	4a1a      	ldr	r2, [pc, #104]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b8:	60d3      	str	r3, [r2, #12]
 80024ba:	e011      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2101      	movs	r1, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f899 	bl	8002604 <RCCEx_PLLSAI1_Config>
 80024d2:	4603      	mov	r3, r0
 80024d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d6:	7cfb      	ldrb	r3, [r7, #19]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d02b      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800250a:	d109      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a02      	ldr	r2, [pc, #8]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002516:	60d3      	str	r3, [r2, #12]
 8002518:	e014      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002528:	d10c      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3304      	adds	r3, #4
 800252e:	2101      	movs	r1, #1
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f867 	bl	8002604 <RCCEx_PLLSAI1_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d02f      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002550:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800255e:	4928      	ldr	r1, [pc, #160]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800256a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800256e:	d10d      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	2102      	movs	r1, #2
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f844 	bl	8002604 <RCCEx_PLLSAI1_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d014      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	74bb      	strb	r3, [r7, #18]
 800258a:	e011      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3320      	adds	r3, #32
 800259a:	2102      	movs	r1, #2
 800259c:	4618      	mov	r0, r3
 800259e:	f000 f925 	bl	80027ec <RCCEx_PLLSAI2_Config>
 80025a2:	4603      	mov	r3, r0
 80025a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00a      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ca:	490d      	ldr	r1, [pc, #52]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ee:	4904      	ldr	r1, [pc, #16]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000

08002604 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002612:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d018      	beq.n	8002650 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800261e:	4b72      	ldr	r3, [pc, #456]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0203 	and.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d10d      	bne.n	800264a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
       ||
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002636:	4b6c      	ldr	r3, [pc, #432]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
       ||
 8002646:	429a      	cmp	r2, r3
 8002648:	d047      	beq.n	80026da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	e044      	b.n	80026da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d018      	beq.n	800268a <RCCEx_PLLSAI1_Config+0x86>
 8002658:	2b03      	cmp	r3, #3
 800265a:	d825      	bhi.n	80026a8 <RCCEx_PLLSAI1_Config+0xa4>
 800265c:	2b01      	cmp	r3, #1
 800265e:	d002      	beq.n	8002666 <RCCEx_PLLSAI1_Config+0x62>
 8002660:	2b02      	cmp	r3, #2
 8002662:	d009      	beq.n	8002678 <RCCEx_PLLSAI1_Config+0x74>
 8002664:	e020      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002666:	4b60      	ldr	r3, [pc, #384]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d11d      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002676:	e01a      	b.n	80026ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002678:	4b5b      	ldr	r3, [pc, #364]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d116      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002688:	e013      	b.n	80026b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800268a:	4b57      	ldr	r3, [pc, #348]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002696:	4b54      	ldr	r3, [pc, #336]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026a6:	e006      	b.n	80026b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      break;
 80026ac:	e004      	b.n	80026b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ae:	bf00      	nop
 80026b0:	e002      	b.n	80026b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026b2:	bf00      	nop
 80026b4:	e000      	b.n	80026b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10d      	bne.n	80026da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026be:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6819      	ldr	r1, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	430b      	orrs	r3, r1
 80026d4:	4944      	ldr	r1, [pc, #272]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d17d      	bne.n	80027dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026e0:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a40      	ldr	r2, [pc, #256]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ec:	f7fe fa0e 	bl	8000b0c <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026f2:	e009      	b.n	8002708 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026f4:	f7fe fa0a 	bl	8000b0c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d902      	bls.n	8002708 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	73fb      	strb	r3, [r7, #15]
        break;
 8002706:	e005      	b.n	8002714 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002708:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ef      	bne.n	80026f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d160      	bne.n	80027dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d111      	bne.n	8002744 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002720:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6892      	ldr	r2, [r2, #8]
 8002730:	0211      	lsls	r1, r2, #8
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68d2      	ldr	r2, [r2, #12]
 8002736:	0912      	lsrs	r2, r2, #4
 8002738:	0452      	lsls	r2, r2, #17
 800273a:	430a      	orrs	r2, r1
 800273c:	492a      	ldr	r1, [pc, #168]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	610b      	str	r3, [r1, #16]
 8002742:	e027      	b.n	8002794 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d112      	bne.n	8002770 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002752:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6892      	ldr	r2, [r2, #8]
 800275a:	0211      	lsls	r1, r2, #8
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6912      	ldr	r2, [r2, #16]
 8002760:	0852      	lsrs	r2, r2, #1
 8002762:	3a01      	subs	r2, #1
 8002764:	0552      	lsls	r2, r2, #21
 8002766:	430a      	orrs	r2, r1
 8002768:	491f      	ldr	r1, [pc, #124]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	610b      	str	r3, [r1, #16]
 800276e:	e011      	b.n	8002794 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002778:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6892      	ldr	r2, [r2, #8]
 8002780:	0211      	lsls	r1, r2, #8
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6952      	ldr	r2, [r2, #20]
 8002786:	0852      	lsrs	r2, r2, #1
 8002788:	3a01      	subs	r2, #1
 800278a:	0652      	lsls	r2, r2, #25
 800278c:	430a      	orrs	r2, r1
 800278e:	4916      	ldr	r1, [pc, #88]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800279e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe f9b4 	bl	8000b0c <HAL_GetTick>
 80027a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027a6:	e009      	b.n	80027bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a8:	f7fe f9b0 	bl	8000b0c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d902      	bls.n	80027bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	73fb      	strb	r3, [r7, #15]
          break;
 80027ba:	e005      	b.n	80027c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ef      	beq.n	80027a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	4904      	ldr	r1, [pc, #16]	; (80027e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000

080027ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027fa:	4b6a      	ldr	r3, [pc, #424]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d018      	beq.n	8002838 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002806:	4b67      	ldr	r3, [pc, #412]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0203 	and.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d10d      	bne.n	8002832 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
       ||
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800281e:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
       ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d047      	beq.n	80028c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
 8002836:	e044      	b.n	80028c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d018      	beq.n	8002872 <RCCEx_PLLSAI2_Config+0x86>
 8002840:	2b03      	cmp	r3, #3
 8002842:	d825      	bhi.n	8002890 <RCCEx_PLLSAI2_Config+0xa4>
 8002844:	2b01      	cmp	r3, #1
 8002846:	d002      	beq.n	800284e <RCCEx_PLLSAI2_Config+0x62>
 8002848:	2b02      	cmp	r3, #2
 800284a:	d009      	beq.n	8002860 <RCCEx_PLLSAI2_Config+0x74>
 800284c:	e020      	b.n	8002890 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800284e:	4b55      	ldr	r3, [pc, #340]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d11d      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285e:	e01a      	b.n	8002896 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002860:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d116      	bne.n	800289a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002870:	e013      	b.n	800289a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002872:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800287e:	4b49      	ldr	r3, [pc, #292]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800288e:	e006      	b.n	800289e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      break;
 8002894:	e004      	b.n	80028a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002896:	bf00      	nop
 8002898:	e002      	b.n	80028a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800289a:	bf00      	nop
 800289c:	e000      	b.n	80028a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800289e:	bf00      	nop
    }

    if(status == HAL_OK)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028a6:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6819      	ldr	r1, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	430b      	orrs	r3, r1
 80028bc:	4939      	ldr	r1, [pc, #228]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d167      	bne.n	8002998 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028c8:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a35      	ldr	r2, [pc, #212]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d4:	f7fe f91a 	bl	8000b0c <HAL_GetTick>
 80028d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028da:	e009      	b.n	80028f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028dc:	f7fe f916 	bl	8000b0c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d902      	bls.n	80028f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	73fb      	strb	r3, [r7, #15]
        break;
 80028ee:	e005      	b.n	80028fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028f0:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1ef      	bne.n	80028dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d14a      	bne.n	8002998 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d111      	bne.n	800292c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002908:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6892      	ldr	r2, [r2, #8]
 8002918:	0211      	lsls	r1, r2, #8
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68d2      	ldr	r2, [r2, #12]
 800291e:	0912      	lsrs	r2, r2, #4
 8002920:	0452      	lsls	r2, r2, #17
 8002922:	430a      	orrs	r2, r1
 8002924:	491f      	ldr	r1, [pc, #124]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	614b      	str	r3, [r1, #20]
 800292a:	e011      	b.n	8002950 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002934:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6892      	ldr	r2, [r2, #8]
 800293c:	0211      	lsls	r1, r2, #8
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6912      	ldr	r2, [r2, #16]
 8002942:	0852      	lsrs	r2, r2, #1
 8002944:	3a01      	subs	r2, #1
 8002946:	0652      	lsls	r2, r2, #25
 8002948:	430a      	orrs	r2, r1
 800294a:	4916      	ldr	r1, [pc, #88]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294c:	4313      	orrs	r3, r2
 800294e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe f8d6 	bl	8000b0c <HAL_GetTick>
 8002960:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002962:	e009      	b.n	8002978 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002964:	f7fe f8d2 	bl	8000b0c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d902      	bls.n	8002978 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	73fb      	strb	r3, [r7, #15]
          break;
 8002976:	e005      	b.n	8002984 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ef      	beq.n	8002964 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	4904      	ldr	r1, [pc, #16]	; (80029a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002994:	4313      	orrs	r3, r2
 8002996:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000

080029a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e095      	b.n	8002ae6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d108      	bne.n	80029d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ca:	d009      	beq.n	80029e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]
 80029d2:	e005      	b.n	80029e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fd ff66 	bl	80008cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a20:	d902      	bls.n	8002a28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	e002      	b.n	8002a2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a36:	d007      	beq.n	8002a48 <HAL_SPI_Init+0xa0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a40:	d002      	beq.n	8002a48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	ea42 0103 	orr.w	r1, r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	0c1b      	lsrs	r3, r3, #16
 8002aa4:	f003 0204 	and.w	r2, r3, #4
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ac4:	ea42 0103 	orr.w	r1, r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b088      	sub	sp, #32
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_SPI_Transmit+0x22>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e15f      	b.n	8002dd0 <HAL_SPI_Transmit+0x2e2>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b18:	f7fd fff8 	bl	8000b0c <HAL_GetTick>
 8002b1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d002      	beq.n	8002b34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b32:	e148      	b.n	8002dc6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_SPI_Transmit+0x52>
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b44:	e13f      	b.n	8002dc6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	88fa      	ldrh	r2, [r7, #6]
 8002b5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	88fa      	ldrh	r2, [r7, #6]
 8002b64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b90:	d10f      	bne.n	8002bb2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	d007      	beq.n	8002bd0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bd8:	d94f      	bls.n	8002c7a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_SPI_Transmit+0xfa>
 8002be2:	8afb      	ldrh	r3, [r7, #22]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d142      	bne.n	8002c6e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	881a      	ldrh	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	1c9a      	adds	r2, r3, #2
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c0c:	e02f      	b.n	8002c6e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d112      	bne.n	8002c42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	881a      	ldrh	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	1c9a      	adds	r2, r3, #2
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c40:	e015      	b.n	8002c6e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c42:	f7fd ff63 	bl	8000b0c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d803      	bhi.n	8002c5a <HAL_SPI_Transmit+0x16c>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d102      	bne.n	8002c60 <HAL_SPI_Transmit+0x172>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002c6c:	e0ab      	b.n	8002dc6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ca      	bne.n	8002c0e <HAL_SPI_Transmit+0x120>
 8002c78:	e080      	b.n	8002d7c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_SPI_Transmit+0x19a>
 8002c82:	8afb      	ldrh	r3, [r7, #22]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d174      	bne.n	8002d72 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d912      	bls.n	8002cb8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	881a      	ldrh	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	1c9a      	adds	r2, r3, #2
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b02      	subs	r3, #2
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cb6:	e05c      	b.n	8002d72 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002cde:	e048      	b.n	8002d72 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d12b      	bne.n	8002d46 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d912      	bls.n	8002d1e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	881a      	ldrh	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	1c9a      	adds	r2, r3, #2
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b02      	subs	r3, #2
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d1c:	e029      	b.n	8002d72 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	330c      	adds	r3, #12
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d44:	e015      	b.n	8002d72 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d46:	f7fd fee1 	bl	8000b0c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d803      	bhi.n	8002d5e <HAL_SPI_Transmit+0x270>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d102      	bne.n	8002d64 <HAL_SPI_Transmit+0x276>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d106      	bne.n	8002d72 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002d70:	e029      	b.n	8002dc6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1b1      	bne.n	8002ce0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	6839      	ldr	r1, [r7, #0]
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fcf9 	bl	8003778 <SPI_EndRxTxTransaction>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e003      	b.n	8002dc6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002dce:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d002      	beq.n	8002dfe <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dfc:	e11a      	b.n	8003034 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e06:	d112      	bne.n	8002e2e <HAL_SPI_Receive+0x56>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10e      	bne.n	8002e2e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2204      	movs	r2, #4
 8002e14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f90e 	bl	8003046 <HAL_SPI_TransmitReceive>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	e107      	b.n	800303e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_SPI_Receive+0x64>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e100      	b.n	800303e <HAL_SPI_Receive+0x266>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e44:	f7fd fe62 	bl	8000b0c <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_SPI_Receive+0x7e>
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e5a:	e0eb      	b.n	8003034 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2204      	movs	r2, #4
 8002e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	88fa      	ldrh	r2, [r7, #6]
 8002e74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	88fa      	ldrh	r2, [r7, #6]
 8002e7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ea6:	d908      	bls.n	8002eba <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	e007      	b.n	8002eca <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ec8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d007      	beq.n	8002f12 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f1a:	d86f      	bhi.n	8002ffc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f1c:	e034      	b.n	8002f88 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d117      	bne.n	8002f5c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f103 020c 	add.w	r2, r3, #12
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002f5a:	e015      	b.n	8002f88 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f5c:	f7fd fdd6 	bl	8000b0c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d803      	bhi.n	8002f74 <HAL_SPI_Receive+0x19c>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f72:	d102      	bne.n	8002f7a <HAL_SPI_Receive+0x1a2>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002f86:	e055      	b.n	8003034 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1c4      	bne.n	8002f1e <HAL_SPI_Receive+0x146>
 8002f94:	e038      	b.n	8003008 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d115      	bne.n	8002fd0 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	1c9a      	adds	r2, r3, #2
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002fce:	e015      	b.n	8002ffc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd0:	f7fd fd9c 	bl	8000b0c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d803      	bhi.n	8002fe8 <HAL_SPI_Receive+0x210>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_Receive+0x216>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002ffa:	e01b      	b.n	8003034 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1c6      	bne.n	8002f96 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	6839      	ldr	r1, [r7, #0]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fb5b 	bl	80036c8 <SPI_EndRxTransaction>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	75fb      	strb	r3, [r7, #23]
 800302a:	e003      	b.n	8003034 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800303c:	7dfb      	ldrb	r3, [r7, #23]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b08a      	sub	sp, #40	; 0x28
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003054:	2301      	movs	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_SPI_TransmitReceive+0x26>
 8003068:	2302      	movs	r3, #2
 800306a:	e20a      	b.n	8003482 <HAL_SPI_TransmitReceive+0x43c>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003074:	f7fd fd4a 	bl	8000b0c <HAL_GetTick>
 8003078:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003080:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800308c:	887b      	ldrh	r3, [r7, #2]
 800308e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003090:	7efb      	ldrb	r3, [r7, #27]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d00e      	beq.n	80030b4 <HAL_SPI_TransmitReceive+0x6e>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309c:	d106      	bne.n	80030ac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <HAL_SPI_TransmitReceive+0x66>
 80030a6:	7efb      	ldrb	r3, [r7, #27]
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d003      	beq.n	80030b4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80030b2:	e1e0      	b.n	8003476 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0x80>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0x80>
 80030c0:	887b      	ldrh	r3, [r7, #2]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80030cc:	e1d3      	b.n	8003476 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d003      	beq.n	80030e2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2205      	movs	r2, #5
 80030de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	887a      	ldrh	r2, [r7, #2]
 80030f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	887a      	ldrh	r2, [r7, #2]
 80030fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	887a      	ldrh	r2, [r7, #2]
 800310e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003124:	d802      	bhi.n	800312c <HAL_SPI_TransmitReceive+0xe6>
 8003126:	8a3b      	ldrh	r3, [r7, #16]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d908      	bls.n	800313e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	e007      	b.n	800314e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800314c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d007      	beq.n	800316c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003174:	f240 8081 	bls.w	800327a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_SPI_TransmitReceive+0x140>
 8003180:	8a7b      	ldrh	r3, [r7, #18]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d16d      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	881a      	ldrh	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	1c9a      	adds	r2, r3, #2
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031aa:	e05a      	b.n	8003262 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d11b      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x1ac>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d016      	beq.n	80031f2 <HAL_SPI_TransmitReceive+0x1ac>
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d113      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	881a      	ldrh	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	1c9a      	adds	r2, r3, #2
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d11c      	bne.n	800323a <HAL_SPI_TransmitReceive+0x1f4>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d016      	beq.n	800323a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	b292      	uxth	r2, r2
 8003218:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003236:	2301      	movs	r3, #1
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800323a:	f7fd fc67 	bl	8000b0c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003246:	429a      	cmp	r2, r3
 8003248:	d80b      	bhi.n	8003262 <HAL_SPI_TransmitReceive+0x21c>
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d007      	beq.n	8003262 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003260:	e109      	b.n	8003476 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d19f      	bne.n	80031ac <HAL_SPI_TransmitReceive+0x166>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003272:	b29b      	uxth	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d199      	bne.n	80031ac <HAL_SPI_TransmitReceive+0x166>
 8003278:	e0e3      	b.n	8003442 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_SPI_TransmitReceive+0x244>
 8003282:	8a7b      	ldrh	r3, [r7, #18]
 8003284:	2b01      	cmp	r3, #1
 8003286:	f040 80cf 	bne.w	8003428 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d912      	bls.n	80032ba <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	881a      	ldrh	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	1c9a      	adds	r2, r3, #2
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b02      	subs	r3, #2
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032b8:	e0b6      	b.n	8003428 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	330c      	adds	r3, #12
 80032c4:	7812      	ldrb	r2, [r2, #0]
 80032c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e0:	e0a2      	b.n	8003428 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d134      	bne.n	800335a <HAL_SPI_TransmitReceive+0x314>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d02f      	beq.n	800335a <HAL_SPI_TransmitReceive+0x314>
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d12c      	bne.n	800335a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d912      	bls.n	8003330 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330e:	881a      	ldrh	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	1c9a      	adds	r2, r3, #2
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b02      	subs	r3, #2
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800332e:	e012      	b.n	8003356 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	7812      	ldrb	r2, [r2, #0]
 800333c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b01      	cmp	r3, #1
 8003366:	d148      	bne.n	80033fa <HAL_SPI_TransmitReceive+0x3b4>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d042      	beq.n	80033fa <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d923      	bls.n	80033c8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	b292      	uxth	r2, r2
 800338c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	1c9a      	adds	r2, r3, #2
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b02      	subs	r3, #2
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d81f      	bhi.n	80033f6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	e016      	b.n	80033f6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f103 020c 	add.w	r2, r3, #12
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	7812      	ldrb	r2, [r2, #0]
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033f6:	2301      	movs	r3, #1
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033fa:	f7fd fb87 	bl	8000b0c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003406:	429a      	cmp	r2, r3
 8003408:	d803      	bhi.n	8003412 <HAL_SPI_TransmitReceive+0x3cc>
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d102      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x3d2>
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003426:	e026      	b.n	8003476 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	f47f af57 	bne.w	80032e2 <HAL_SPI_TransmitReceive+0x29c>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	f47f af50 	bne.w	80032e2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f996 	bl	8003778 <SPI_EndRxTxTransaction>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346c:	e003      	b.n	8003476 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800347e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003482:	4618      	mov	r0, r3
 8003484:	3728      	adds	r7, #40	; 0x28
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800349c:	f7fd fb36 	bl	8000b0c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	4413      	add	r3, r2
 80034aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034ac:	f7fd fb2e 	bl	8000b0c <HAL_GetTick>
 80034b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034b2:	4b39      	ldr	r3, [pc, #228]	; (8003598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	015b      	lsls	r3, r3, #5
 80034b8:	0d1b      	lsrs	r3, r3, #20
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034c2:	e054      	b.n	800356e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ca:	d050      	beq.n	800356e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034cc:	f7fd fb1e 	bl	8000b0c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d902      	bls.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d13d      	bne.n	800355e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034fa:	d111      	bne.n	8003520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003504:	d004      	beq.n	8003510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350e:	d107      	bne.n	8003520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003528:	d10f      	bne.n	800354a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e017      	b.n	800358e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3b01      	subs	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4013      	ands	r3, r2
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	bf0c      	ite	eq
 800357e:	2301      	moveq	r3, #1
 8003580:	2300      	movne	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	429a      	cmp	r2, r3
 800358a:	d19b      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	2000035c 	.word	0x2000035c

0800359c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035ae:	f7fd faad 	bl	8000b0c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	4413      	add	r3, r2
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035be:	f7fd faa5 	bl	8000b0c <HAL_GetTick>
 80035c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	330c      	adds	r3, #12
 80035ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035cc:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	00da      	lsls	r2, r3, #3
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	0d1b      	lsrs	r3, r3, #20
 80035dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035e4:	e060      	b.n	80036a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035ec:	d107      	bne.n	80035fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d104      	bne.n	80035fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d050      	beq.n	80036a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003606:	f7fd fa81 	bl	8000b0c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003612:	429a      	cmp	r2, r3
 8003614:	d902      	bls.n	800361c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	2b00      	cmp	r3, #0
 800361a:	d13d      	bne.n	8003698 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800362a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003634:	d111      	bne.n	800365a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363e:	d004      	beq.n	800364a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003648:	d107      	bne.n	800365a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003658:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003662:	d10f      	bne.n	8003684 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003682:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e010      	b.n	80036ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d196      	bne.n	80035e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3728      	adds	r7, #40	; 0x28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2000035c 	.word	0x2000035c

080036c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036dc:	d111      	bne.n	8003702 <SPI_EndRxTransaction+0x3a>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e6:	d004      	beq.n	80036f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f0:	d107      	bne.n	8003702 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003700:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff febd 	bl	800348c <SPI_WaitFlagStateUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e023      	b.n	8003770 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003730:	d11d      	bne.n	800376e <SPI_EndRxTransaction+0xa6>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800373a:	d004      	beq.n	8003746 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003744:	d113      	bne.n	800376e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2200      	movs	r2, #0
 800374e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff ff22 	bl	800359c <SPI_WaitFifoStateUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003762:	f043 0220 	orr.w	r2, r3, #32
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e000      	b.n	8003770 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2200      	movs	r2, #0
 800378c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff ff03 	bl	800359c <SPI_WaitFifoStateUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e027      	b.n	80037fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2200      	movs	r2, #0
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff fe68 	bl	800348c <SPI_WaitFlagStateUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c6:	f043 0220 	orr.w	r2, r3, #32
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e014      	b.n	80037fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2200      	movs	r2, #0
 80037da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f7ff fedc 	bl	800359c <SPI_WaitFifoStateUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ee:	f043 0220 	orr.w	r2, r3, #32
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e000      	b.n	80037fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <memset>:
 8003804:	4402      	add	r2, r0
 8003806:	4603      	mov	r3, r0
 8003808:	4293      	cmp	r3, r2
 800380a:	d100      	bne.n	800380e <memset+0xa>
 800380c:	4770      	bx	lr
 800380e:	f803 1b01 	strb.w	r1, [r3], #1
 8003812:	e7f9      	b.n	8003808 <memset+0x4>

08003814 <__libc_init_array>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4d0d      	ldr	r5, [pc, #52]	; (800384c <__libc_init_array+0x38>)
 8003818:	4c0d      	ldr	r4, [pc, #52]	; (8003850 <__libc_init_array+0x3c>)
 800381a:	1b64      	subs	r4, r4, r5
 800381c:	10a4      	asrs	r4, r4, #2
 800381e:	2600      	movs	r6, #0
 8003820:	42a6      	cmp	r6, r4
 8003822:	d109      	bne.n	8003838 <__libc_init_array+0x24>
 8003824:	4d0b      	ldr	r5, [pc, #44]	; (8003854 <__libc_init_array+0x40>)
 8003826:	4c0c      	ldr	r4, [pc, #48]	; (8003858 <__libc_init_array+0x44>)
 8003828:	f000 f818 	bl	800385c <_init>
 800382c:	1b64      	subs	r4, r4, r5
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	2600      	movs	r6, #0
 8003832:	42a6      	cmp	r6, r4
 8003834:	d105      	bne.n	8003842 <__libc_init_array+0x2e>
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	f855 3b04 	ldr.w	r3, [r5], #4
 800383c:	4798      	blx	r3
 800383e:	3601      	adds	r6, #1
 8003840:	e7ee      	b.n	8003820 <__libc_init_array+0xc>
 8003842:	f855 3b04 	ldr.w	r3, [r5], #4
 8003846:	4798      	blx	r3
 8003848:	3601      	adds	r6, #1
 800384a:	e7f2      	b.n	8003832 <__libc_init_array+0x1e>
 800384c:	080038b4 	.word	0x080038b4
 8003850:	080038b4 	.word	0x080038b4
 8003854:	080038b4 	.word	0x080038b4
 8003858:	080038b8 	.word	0x080038b8

0800385c <_init>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	bf00      	nop
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr

08003868 <_fini>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	bf00      	nop
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr
